%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: bfbabd22c62c640a6ba459d46825055b, type: 3}
  m_Name: README
  m_EditorClassIdentifier: 
  header:
    title: A/B Test for Level Difficulty README
    icon: {fileID: 2800000, guid: 83f0684dab5534e2492f651aaaf4a151, type: 3}
  sections:
  - subHeader1: Intro
    subHeader2: 
    subHeader3: 
    body: An A/B Test is a useful mechanism for tweaking a single feature of game
      play or game design, and learning what variation of that feature is most engaging
      to your players.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'In this sample, the feature we are testing is level difficulty, specifically
      how much XP is required to get to the next level. When a player is signed in,
      the screen displays their level, as well as an XP meter that indicates their
      current XP and the total amount of XP required to level up (either 100, 80,
      60, 50, or 30). The amount of XP that a player needs to level up depends on
      which test group they were randomly placed into.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'For diagnostic purposes, the player''s test group is also displayed (A,
      B, C, D, or E). While in a real game setting the test group would rarely be
      publicly displayed, it could be used internally to capture analytics details
      about how the different groups respond to the A/B test.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Implementation Overview
    subHeader2: 
    subHeader3: 
    body: 'When the scene first loads, Unity Services is initialized and the player
      is signed in to an anonymous player ID (either one that has already been created
      from a previous sign-in or a new one) using the Authentication service. Once
      Authentication has completed sign-in, the client code gets the player''s current
      data from Cloud Save. If it is a new user (i.e. not a cached anonymous player),
      the player''s initial level (1) and xp (0) will be saved in Cloud Save instead
      of loading existing data. The client code will also download any existing currency
      data from the Economy service. Finally, Remote Config will be queried to fetch
      the appropriate A/B test group name and xp needed for leveling up for this
      player. All of this updated data will get displayed in the scene. At this point,
      the "Gain XP" button is enabled for interaction.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'When a player clicks the "Gain XP" button, a call is sent to the Cloud
      Code endpoint "GainXPAndLevelIfReady". This server-authoritative call fetches
      the player''s info from Cloud Code and Remote Config, increases the XP by the
      amount specified by Remote Config (10 points), and tests whether the new player
      XP total equals the amount of XP needed for leveling up. If it does not, the
      player''s new XP is saved in Cloud Code and returned to the client code, which
      updates the values and shows text indicating how much XP was added. If it does,
      Economy is called to distribute the level-up rewards (100 COIN), and Cloud
      Code is called to save the increased player level and new player XP (XP gets
      reset to 0 upon level up) before returning the info to the client code.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'The client code then opens a dialog to indicate that the player has leveled
      up, what currency reward was granted, and updates the relevant data in the
      scene. Note: A cross reference dictionary located in the Remote Config and
      initialized at start-up is used to convert the rewarded currency ID (i.e. "COIN")
      to an Addressable address, which can be used to display the sprite (i.e. "Sprites/Currency/Coin").
      This step allows players to experience different art based on their segmentation
      and provides a convenient way to retrieve additional data for a specific currency
      at runtime.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: "Please note that a simpler approach to display different art according
      to a player\u2019s segmentation is to attach additional information to the
      Custom Data associated with Currencies in the Economy configuration data. However,
      for the purpose of this segmentation sample, the data was added to the Game
      Overrides themselves to demonstrate the flexibility permitted by the Remote
      Config service.  "
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'If a player instead clicks "Sign In As New Player", the current anonymous
      player ID is deleted, the cached values are reset to empty/default state, and
      then a new sign in is initiated with the Authentication service, following
      the same flow as when the scene first loads. Each time this Sign In As New
      Player flow is followed, a new anonymous player ID is created, with the potential
      for being randomly placed into a different A/B test group. Because the group
      determination is random, you may need to follow this flow a few times before
      you see yourself in a new group.  '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: This use case is created with the assumption that the game
      style won''t trigger frequent XP increases. While testing the use case, if
      "Gain XP" is clicked 15+ times in rapid succession, you will likely see either
      an "Unprocessable Entity" exception or a "CloudSaveException: Rate limit has
      been exceeded" exception. Both of these indicate that the Cloud Save rate limit
      for number of calls has been exceeded (the rate limit includes both calls from
      Cloud Code and client code). To resolve either of these exceptions, wait a
      minute and try again, or sign out and back in with a new player ID (not recommended
      in a real game).  '
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Packages Required
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: 'Authentication: Automatically signs in the user anonymously to keep
        track of their data on the server side.'
      bodyFormat: 0
      bulletList: []
    - body: 'Cloud Save: Server authoritative way to save player data and game state.
        In this sample, it stores the player''s level and XP.'
      bodyFormat: 0
      bulletList: []
    - body: 'Economy: Keeps track of the player''s currencies.'
      bodyFormat: 0
      bulletList: []
    - body: 'Remote Config: Provides key-value pairs where the value that is mapped
        to a given key can be changed on the server-side, either manually or based
        on specific Game Overrides. In this sample, a single Game Override with a
        built-in A/B test is used to return different values for the amount of XP
        required to level up. Remote Config also stores data associated with Currency
        icon Addressable addresses.'
      bodyFormat: 0
      bulletList: []
    - body: 'Cloud Code: Keeps important validation logic for increasing XP and leveling
        up the player on the server side.'
      bodyFormat: 0
      bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: See the package docs to learn how to install and configure these SDKs in
      your project.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Authentication
      url: https://docs.unity.com/authentication/Content/InstallAndConfigureSDK.htm
    - linkText: Cloud Save
      url: https://docs.unity.com/cloud-save/Content/index.htm#Implementation
    - linkText: Economy
      url: https://docs.unity.com/economy/Content/implementation.htm?tocpath=Implementation%7C_____0
    - linkText: Remote Config
      url: https://docs.unity3d.com/Packages/com.unity.remote-config@2.0/manual/ConfiguringYourProject.html
    - linkText: Cloud Code
      url: https://docs.unity.com//cloud-code/Content/implementation.htm?tocpath=Implementation%7C_____0#SDK_installation
  - subHeader1: Dashboard Setup
    subHeader2: 
    subHeader3: 
    body: 'To use Cloud Save, Economy, Remote Config, and Cloud Code services in
      your game, activate each service for your organization and project in the Unity
      Dashboard. To duplicate this sample scene''s setup on your own dashboard, you''ll
      need a a currency in the Economy setup, some Config Values and a Game Override
      set up in Remote Config, and a script published in Cloud Code:'
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Economy Items
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Coin
      bodyFormat: 1
      bulletList:
      - body: The currency distributed as a reward for the player leveling up.
        bodyFormat: 0
        bulletList: []
      - body: 'ID: "COIN"'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Remote Config
    subHeader3: Config Values
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: AB_TEST_GROUP
      bodyFormat: 1
      bulletList:
      - body: The identifier for which test user group the player is in.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: string'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: ""'
        bodyFormat: 0
        bulletList: []
    - body: AB_TEST_ID
      bodyFormat: 1
      bulletList:
      - body: The identifier for which AB Test is actively being run for this user.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: string'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: ""'
        bodyFormat: 0
        bulletList: []
    - body: AB_TEST_LEVEL_UP_XP_NEEDED
      bodyFormat: 1
      bulletList:
      - body: The amount of XP needed in order for the player to level up.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: int'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: 100'
        bodyFormat: 0
        bulletList: []
    - body: AB_TEST_XP_INCREASE
      bodyFormat: 1
      bulletList:
      - body: The amount the player's XP will increase by each time they gain XP.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: int'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: 10'
        bodyFormat: 0
        bulletList: []
    - body: CURRENCIES
      bodyFormat: 1
      bulletList:
      - body: A cross reference from currencyId to spriteAddresses for all currency
          types
        bodyFormat: 0
        bulletList: []
      - body: 'Type: json'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: See markdown README for details'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Game Overrides
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: A/B Test Level Difficulty
      bodyFormat: 1
      bulletList:
      - body: 'Status: Active'
        bodyFormat: 0
        bulletList: []
      - body: 'Audience: true, 100%'
        bodyFormat: 0
        bulletList: []
      - body: 'Start Date: Immediately'
        bodyFormat: 0
        bulletList: []
      - body: 'End Date: Indefinitely'
        bodyFormat: 0
        bulletList: []
      - body: 'Overrides:'
        bodyFormat: 0
        bulletList:
        - body: 'Variant 1 (control group):'
          bodyFormat: 0
          bulletList:
          - 'AB_TEST_LEVEL_UP_XP_NEEDED: 100'
          - 'AB_TEST_GROUP: A'
          - 'AB_TEST_ID: LevelDifficultyTest1'
        - body: 'Variant 2:'
          bodyFormat: 0
          bulletList:
          - 'AB_TEST_LEVEL_UP_XP_NEEDED: 80'
          - 'AB_TEST_GROUP: B'
          - 'AB_TEST_ID: LevelDifficultyTest1'
        - body: 'Variant 3:'
          bodyFormat: 0
          bulletList:
          - 'AB_TEST_LEVEL_UP_XP_NEEDED: 60'
          - 'AB_TEST_GROUP: C'
          - 'AB_TEST_ID: LevelDifficultyTest1'
        - body: 'Variant 4:'
          bodyFormat: 0
          bulletList:
          - 'AB_TEST_LEVEL_UP_XP_NEEDED: 50'
          - 'AB_TEST_GROUP: D'
          - 'AB_TEST_ID: LevelDifficultyTest1'
        - body: 'Variant 5:'
          bodyFormat: 0
          bulletList:
          - 'AB_TEST_LEVEL_UP_XP_NEEDED: 30'
          - 'AB_TEST_GROUP: E'
          - 'AB_TEST_ID: LevelDifficultyTest1'
    linkList: []
  - subHeader1: 
    subHeader2: Cloud Code Scripts
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: 'ABTestLevelDifficulty_GainXPAndLevelIfReady:'
      bodyFormat: 1
      bulletList:
      - body: 'Parameters: `none`'
        bodyFormat: 0
        bulletList: []
      - body: 'Script: "Assets/Use Case Samples/AB Test Level Difficulty/Cloud Code/ABTestLevelDifficulty_GainXPAndLevelIfReady.js"'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: The Cloud Code scripts included in the "Cloud Code" folder
      are just local copies, since you can''t see the sample''s dashboard. Changes
      to these scripts will not affect the behavior of this sample since they will
      not be automatically uploaded to Cloud Code service.'
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Analytics
    subHeader3: 
    body: 'In the configuration of the Analytics custom events and parameters, you
      can see a fairly long list of potential parameters that are sent with some
      of the events. This extended list allows for a more flexible analysis of different
      parameter groupings in the Data Explorer on the Analytics tab of the Unity
      dashboard. Alternatively, you could send just the ungrouped parameters (buttonName,
      sceneName, etc), and do any kind of grouped analysis desired using the Data
      Export feature within the Data Explorer on the dashboard. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: This sample demonstrates the code needed to trigger analytics
      events, however additional code may be necessary to meet legal requirements
      such as GDPR, CCPA, and PIPL. See more info about managing data privacy at
      https://docs.unity.com/analytics/ManagingDataPrivacy.html'
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Custom Events
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: SceneOpened
      bodyFormat: 2
      bulletList:
      - body: 'Description: Event sent each time the scene is loaded.'
        bodyFormat: 0
        bulletList: []
      - body: 'Enabled: true'
        bodyFormat: 0
        bulletList: []
      - body: 'Custom Parameters:'
        bodyFormat: 0
        bulletList:
        - body: sceneName
          bodyFormat: 2
          bulletList: []
    - body: ActionButtonPressed
      bodyFormat: 2
      bulletList:
      - body: 'Description: Event sent for each button press in the scene.'
        bodyFormat: 0
        bulletList: []
      - body: 'Enabled: true'
        bodyFormat: 0
        bulletList: []
      - body: 'Custom Parameters:'
        bodyFormat: 0
        bulletList:
        - body: buttonName
          bodyFormat: 2
          bulletList: []
        - body: sceneName
          bodyFormat: 2
          bulletList: []
        - body: abGroup
          bodyFormat: 2
          bulletList: []
        - body: buttonNameBySceneName
          bodyFormat: 2
          bulletList: []
        - body: buttonNameByABGroup
          bodyFormat: 2
          bulletList: []
        - body: buttonNameBySceneNameAndABGroup
          bodyFormat: 2
          bulletList: []
    - body: SceneSessionLength
      bodyFormat: 2
      bulletList:
      - body: 'Description: Event sent to indicate the length of time between when
          `Start()` is triggered on the AnalyticsManager script and the back button
          in the scene is pressed (effectively the time spent in the scene).'
        bodyFormat: 0
        bulletList: []
      - body: 'Enabled: true'
        bodyFormat: 0
        bulletList: []
      - body: 'Custom Parameters:'
        bodyFormat: 0
        bulletList:
        - body: timeRange
          bodyFormat: 2
          bulletList: []
        - body: sceneName
          bodyFormat: 2
          bulletList: []
        - body: abGroup
          bodyFormat: 2
          bulletList: []
        - body: timeRangeBySceneName
          bodyFormat: 2
          bulletList: []
        - body: timeRangeByABGroup
          bodyFormat: 2
          bulletList: []
        - body: timeRangeBySceneNameAndABGroup
          bodyFormat: 2
          bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Custom Parameters
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: sceneName
      bodyFormat: 2
      bulletList:
      - body: 'Description: The name of the scene where the event was triggered.'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: buttonName
      bodyFormat: 2
      bulletList:
      - body: 'Description: The name of the button that has been pressed.'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: abGroup
      bodyFormat: 2
      bulletList:
      - body: 'Description: The AB group and AB Test ID the user sending the analytics
          event has been grouped into. Formatted: "AB Group Name (AB Test ID)".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: timeRange
      bodyFormat: 2
      bulletList:
      - body: 'Description: A range of time spent in the scene where the event was
          triggered.'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: buttonNameBySceneName
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping button name with scene name.
          Formatted like "Button Name - Scene Name".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: buttonNameByABGroup
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping button name with the A/B Group
          the user is in as determined by Remote Config. Formatted like "Button Name
          - AB Group (AB Test ID)".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: buttonNameBySceneNameAndABGroup
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping button name with the scene
          name and A/B Group the user is in as determined by Remote Config. Formatted
          like "Button Name - Scene Name - AB Group (AB Test ID)".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: timeRangeBySceneName
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping time range with the name of
          the scene where the time was spent. Formatted like "Time Range - Scene
          Name".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: timeRangeByABGroup
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping time range with the the A/B
          Group the user is in as determined by Remote Config. Formatted like "Time
          Range - AB Group (AB Test ID)".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    - body: timeRangeBySceneNameAndABGroup
      bodyFormat: 2
      bulletList:
      - body: 'Description: Formatted string grouping time range with the the scene
          name and the A/B Group the user is in as determined by Remote Config. Formatted
          like "Time Range - Scene Name - AB Group (AB Test ID)".'
        bodyFormat: 0
        bulletList: []
      - body: 'Type: `STRING`'
        bodyFormat: 0
        bulletList: []
    linkList: []
