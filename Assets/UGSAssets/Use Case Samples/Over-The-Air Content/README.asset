%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: bfbabd22c62c640a6ba459d46825055b, type: 3}
  m_Name: README
  m_EditorClassIdentifier: 
  header:
    title: Over-The-Air Content Delivery README
    icon: {fileID: 2800000, guid: 83f0684dab5534e2492f651aaaf4a151, type: 3}
  sections:
  - subHeader1: Intro
    subHeader2: 
    subHeader3: 
    body: When you want to add new content to your game, releasing a new version
      of your application that users must then install before they can play can result
      in a poor user experience. As an alternative, you can use an Over the Air Content
      approach, so that the player can open the application and begin interacting
      with the game while new content downloads in the background or during idle
      times.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: This sample uses a menu screen to download and install new content without
      leaving the game.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Overview
    subHeader2: 
    subHeader3: 
    body: This sample demonstrates how to download new content from the cloud while
      the game is running. The client pings the Remote Config service, which informs
      the client that there is new content, and where to get it.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: This sample primarily uses Addressables with Cloud Content
      Delivery to add new content to a game while it is running. The Remote Config,
      Economy, and Cloud Code service functions used are not strictly required for
      the content delivery part to work.'
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Initialization
    subHeader3: 
    body: 'When the scene loads, the `OverTheAirContentSceneManager.cs` script performs
      the following initialization tasks:'
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Initializes Unity Gaming Services.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: "Signs in the player anonymously using the Authentication service. If
        you\u2019ve previously initialized any of the other sample scenes, Authentication
        will use your cached Player ID instead of creating a new one."
      bodyFormat: 0
      bulletList: []
      linkList:
      - linkText: Anonymous Authentication
        url: https://docs.unity.com/authentication/UsingAnonSignIn.html
    - body: Downloads all configuration data from Remote Config, some of which is
        necessary to detect and download new content.
      bodyFormat: 0
      bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: Usage
    subHeader3: 
    body: When the scene loads, you'll see a Begin button. When you press it, an
      interstitial screen appears, and the new content automatically begins downloading.
      When the download completes, you can click the Play button to continue to view
      and interact with the new content.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: You can click one of the two Restart Sample buttons to return to the beginning.
      If you choose to clear the cache, the sample will download the content again
      from Cloud Content Delivery.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Setup
    subHeader2: Requirements
    subHeader3: 
    body: 'To replicate this use case, you need the following Unity packages in your
      project:'
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Addressables
      url: https://docs.unity3d.com/Packages/com.unity.addressables@latest
    - linkText: Authentication
      url: https://docs.unity.com/authentication/Content/InstallAndConfigureSDK.htm
    - linkText: Remote Config
      url: https://docs.unity3d.com/Packages/com.unity.remote-config@2.0/manual/ConfiguringYourProject.html
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: This sample uses Cloud Content Delivery (CCD) to host the downloaded new
      content. There's no need to install the CCD SDK in order to recreate this sample,
      as we're only using it for hosting the content asset bundle, which gets downloaded
      using the Addressables SDK.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Cloud Content Delivery (CCD)
      url: https://docs.unity.com/ccd/UnityCCD.html
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: To use these services in your game, activate each service for your Organization
      and project in the Unity Dashboard.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Dashboard Setup
    subHeader3: 
    body: 'To replicate this sample scene''s setup on your own dashboard, you need
      to:'
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Upload an Addressables build (catalog and asset bundle) to a Cloud Content
        Delivery bucket.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: Configure values for the Remote Config service.
      bodyFormat: 0
      bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Cloud Content Delivery
    body: You can use Addressables to build asset bundles (and optionally content
      catalogs) which can then be uploaded to CCD and downloaded by your game. This
      process isn't detailed in this document, but you can learn about it in the
      CCD + Addressables walkthrough tutorial linked below.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: CCD + Addressables walkthrough tutorial
      url: https://docs.unity.com/ccd/UnityCCDWalkthrough.html
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'It''s very common to use Addressables and CCD from a single project, however,
      our example demonstrates a multi-project setup. Developers with medium to large
      teams might use the latter approach for a number of reasons:'
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Reduce iteration time by making the main project smaller.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: Segment different types of work across multiple teams using smaller projects.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: Enable user-generated content.
      bodyFormat: 0
      bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: This example uses a multi-project setup. One Unity project is the main
      project that downloads new content at runtime, while a separate Unity project
      builds new content into asset bundles for the main project to download. The
      main project only knows about new content built with the second project when
      the Remote Config service informs it.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: When you cloned or downloaded this project, you likely got the main branch.
      This branch contains the main project, which downloads new content from CCD.
      To see how that downloadable content is created, see the ota-content branch
      of this GitHub repo. It has additional Addressables configurations needed for
      creating the asset bundles. You can explore the differences in the AddressableAssetSettings
      file, the Addressables Groups window, and the Addressables Profiles window.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: See the ota-content branch in GitHub
      url: https://github.com/Unity-Technologies/com.unity.services.samples.use-cases/tree/ota-content
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'To make the multiple-project setup work, you''ll need to upload a remote
      catalog along with your asset bundles. In your content build project:'
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Select the AddressableAssetSettings asset to view it in the Inspector
        window.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: Make sure the Build Remote Catalog option is enabled.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: Perform your Addressables build.
      bodyFormat: 0
      bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: In the resulting build folder, there will be a catalog JSON file and a
      catalog hash file. Upload both files to your CCD bucket along with the related
      asset bundles.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'After you''ve uploaded an Addressables build to a CCD bucket, make notes
      of a few things that you''ll use in the Remote Config settings:'
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: The "Addressable Remote Path URL" for the bucket (found in the bucket
        page of the dashboard).
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: The name of the content catalog json file.
      bodyFormat: 0
      bulletList: []
      linkList: []
    - body: The addresses of any assets you want to download.
      bodyFormat: 0
      bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Setting up your own content creation
    body: 'If you want to set up your own content creation workflow using Addressables
      and CCD, please have a look at these other learning resources:'
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: CCD + Addressables Walkthrough using the Loady Dungeons sample project
      url: https://docs.unity.com/ccd/UnityCCDWalkthrough.html
    - linkText: Managing catalogs at runtime
      url: https://docs.unity3d.com/Packages/com.unity.addressables@1.20/manual/LoadContentCatalogAsync.html
    - linkText: Loading from Multiple Projects (optional)
      url: https://docs.unity3d.com/Packages/com.unity.addressables@1.20/manual/MultiProject.html
  - subHeader1: 
    subHeader2: Remote Config
    subHeader3: Config Values
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: OTA_CATALOG_URL
      bodyFormat: 1
      bulletList:
      - body: The URL for the Addressables catalog file in the CCD bucket.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: string'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: The bucket URL provided to you by the CCD dashboard, concatenated
          with the catalog json filename at the end. Example: `Something like: https://[YOUR_PROJECT_ID].client-api.unity3dusercontent.com/client_api/v1/environments/[YOUR_ENV_NAME]/buckets/[YOUR_BUCKET_ID]/release_by_badge/latest/entry_by_path/content/?path=catalog_YYYY.MM.DD.HH.MM.SS.json`'
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: OTA_CONTENT_UPDATES
      bodyFormat: 1
      bulletList:
      - body: Indicates that there is new content to download. Each entry represents
          a new value in Remote Config.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: JSON'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: {"updates": [{"configKey": "OTA_NEW_CONTENT"}]}'
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: OTA_NEW_CONTENT
      bodyFormat: 1
      bulletList:
      - body: Information about the new content. In this case it's simple, but you
          could have lots of info here.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: JSON'
        bodyFormat: 0
        bulletList: []
      - body: 'Value: {"prefabAddress":"NewContentPrefab"}'
        bodyFormat: 0
        bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: Every time you build and upload a new catalog file, you''ll
      need to update the OTA_CATALOG_URL value in Remote Config to reflect the new
      filename. If you use the Update a Previous Build option, you won''t need to
      update the catalog URL in Remote Config.'
    bulletList: []
    linkList: []
